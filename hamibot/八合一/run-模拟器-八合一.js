42["script:run", {
    "id": "670bba4a06081ca4a468f0a6",
    "name": "670bba4a06081ca4a468f0a6",
    "text": "\nconst hamibot={env:{APP_ENV:\"development\",USER_ID:\"6655d208c7ff5493883c4a42\",ROBOT_ID:\"670b956006081ca4a4674e3b\",SCRIPT_ID:\"670bba4a06081ca4a468f0a6\",TIMESTAMP:\"2024-10-13 20:26:43\"},plan:{name:\"免费\",onFreeTrial:false,model:\"free\"},robotName:\"琼浆大蒜\",scriptName:\"八合一\",};\nhamibot.postMessage=function(){};hamibot.exit=function(){exit();};Object.freeze(hamibot.env);Object.freeze(hamibot.plan);Object.freeze(hamibot);\n/** * 快手极速、快手普通、抖音极速、百度极速、百度大字、好看视频极速、西瓜视频、今日头条极速版合集（养号版） */\nconst config_file = './config/hamibot/combine/config_hamibot_ks_dy_bd_xg_tt'\n/** * 脚本资源节点 */\nconst resource_url_array = [\"https://auto-hamibot-res-1309032940.cos-website.ap-chengdu.myqcloud.com/public/%s\", \"https://auto-hamibot-res.vercel.app/%s\", \"https://bzjl.gitee.io/auto_hamibot_res/%s\", \"http://82.156.132.121/public/%s\",]\n/** * 请求资源最大超时时间 */\nlet request_time_out = 3000\nlet script_url = \"\"\nlet init_file = 'executor_new'\nlet config_resolver_file = 'config_resolver'\nlet cst_config\n// 本地调试环境下，不会从云端下载脚本\nconst is_debug = true\nrun()\n\nfunction run() {\n    createListener()\n    toastLog('请稍等，正在加载资源.....')\n    script_url = testConnect()\n    if (!script_url) {\n        localRun()\n        return\n    }\n    // 加载配置\n    if (config_file) {\n        toastLog('加载配置......')\n        autoImportMoudles([config_file, config_resolver_file])\n        resolveConfig()\n        storageConfig(config_resolver_file)\n        if (cst_config && cst_config.import_moudles) {\n            autoImportMoudles(cst_config.import_moudles)\n        }\n    }    // 执行主函数\n    if (init_file) {\n        toastLog('执行主函数......')\n        autoImportMoudles([init_file])\n        if (cst_config.is_init_ui) {\n            engines.execScriptFile(init_file + '.js')\n        } else {\n            let executor = require('./' + init_file + '.js')\n            executor.execute()\n        }\n    }        \n  \t// destory(import_moudles_arr)}\n    /** * 创建监听器 */\n    function createListener() {\n        threads.start(function () {\n            events.on(\"stop\", function () {\n                stopOtherEngines()\n            })\n            events.on(\"exit\", function () {\n                stopOtherEngines()\n            })\n        });\n    }\n\n    /** * 自动导入下载所需模块脚本 * @param {*} import_moudles  */function autoImportMoudles(import_moudles_arr) {\n        if (is_debug) {\n            return\n        }\n        if (!import_moudles_arr || import_moudles_arr.length == 0) {\n            return\n        }\n        for (let i = 0; i < import_moudles_arr.length; i++) {\n            let import_moudle_name = import_moudles_arr[i] + '.js'\n            let script_path = downloadScript(import_moudle_name)\n            if (!script_path) {\n                // 如果下载失败，尝试重新下载\n                let script_path = downloadScript(script_url, import_moudle_name)\n                if (!script_path) {\n                    console.error('网络不稳定，脚本下载失败，请尝试调整网络后重新下载！')\n                    exit()\n                }\n            }\n        }\n    }\n\n    function resolveConfig() {\n        let config_resolver = require(config_resolver_file + '.js')\n        let config_obj = require(config_file + '.js')\n        cst_config = config_resolver.resolve(config_obj)\n    }\n\n    function storageConfig(config_file) {\n        let env_config\n        try {\n            env_config = JSON.parse(JSON.stringify(hamibot.env))\n        } catch (err) {\n        }\n        if (!env_config) {\n            // 如果 hamibot中没有，则取autojs的配置\n            // 自定义实现\n            // }\\t\\t// 把总链接也放到本地存储中\n            env_config.script_url = script_url\n            let storage = storages.create(\"app_config\")\n            storage.put(\"global_config\", env_config)\n            storage.put(\"config_path\", './' + config_file + '.js')\n        }\n\n        /** * 清理函数 * @param {*} import_moudles  * @returns  */\n        function destory(import_moudles) {\n            if (!import_moudles || import_moudles.length == 0) {\n                return\n            }\n            for (let i = 0; i < import_moudles.length; i++) {\n                let import_moudle_name = import_moudles[i] + '.js'\n                if (isScriptExist(import_moudle_name)) {\n                    // 文件删除\n                    files.remove(import_moudle_name)\n                }\n            }\n        }\n\n        /** * 判断该模块脚本在本地是否存在 * @param {*} script_moudle_name  * @returns  */\n        function isScriptExist(script_moudle_name) {\n            if (files.exists('./' + script_moudle_name)) {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n}\n\n/** * 下载脚本 * @param {*} scriptName  * @returns  */\nfunction downloadScript(scriptName) {    // 查找指定名字脚本的下载链接\n    var scriptUrl = util.format(script_url, scriptName)\n    var url = encodeURI(scriptUrl)\n    var r = http.get(url, {\n        headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'\n        }\n    }).body.string()\n    var scriptPath = files.cwd() + '/' + scriptName\n    let createdDirs = files.createWithDirs(scriptPath)\n    files.write(scriptPath, r)\n    return scriptPath\n}\n\n\nfunction testConnect() {\n    http.__okhttp__.setTimeout(request_time_out);   // 设置全局默认超时时间为n秒\n    for (let i = 0; i < resource_url_array.length; i++) {\n        let resource_url = resource_url_array[i]\n        let scriptUrl = util.format(resource_url, \"executor.js\")\n        let url = encodeURI(scriptUrl)\n        log('正在尝试节点' + Number(i + 1))\n        try {\n            let response = http.get(url, {\n                headers: {\n                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'\n                }\n            })\n            if (response.statusCode == 200) {\n                console.info('当前资源节点通畅！')\n                return resource_url;\n            }\n        } catch (error) {\n            console.error('当前资源节点不通，尝试切换下一节点！')\n            continue;\n        }\n    }\n    console.error(\"当前暂无可用资源节点，请检查网络后重新运行脚本\")\n    return \"\";\n}\n\nfunction localRun() {\n    log('尝试本地加载')\n    try {\n        let executor = require('./' + init_file + '.js')\n        executor.execute()\n    } catch (error) {\n        console.error(\"本地暂无可加载资源，请加群联系管理\")\n    }\n}\n\n/** * 结束其他所有脚本 */\nfunction stopOtherEngines() {\n    console.hide()    /*let current_engine = engines.myEngine();    let all_engines = engines.all();    toastLog(\"正在运行的脚本有\", all_engines.length, \"个\");    for (let i = 0; i < all_engines.length; i++) {        let engine_ele = all_engines[i]        if (engine_ele.toString() != current_engine.toString()) {            engine_ele.forceStop();        }    }    toastLog(\"脚本已停止运行\");*/\n}\n",
    "scriptName": "八合一"
}]